import torch
import torch.nn as nn
from torchtyping import TensorType

# Autoregressively generates a sequence of characters using a language model
class Solution:
    def generate(self, model, new_chars: int, context: TensorType[int], context_length: int, int_to_char: dict) -> str:
        # Set a fixed random seed for reproducible sampling
        generator = torch.manual_seed(0)
        # Save the initial RNG state for consistent results across iterations
        initial_state = generator.get_state()
        res = []
        for i in range(new_chars):
            # Keep context within the modelâ€™s maximum input length
            if len(context.T) > context_length:
                context = context[:, -context_length:]

            # Run model to get logits (B, T, Vocab_Size)
            prediction = model(context)
            # Use only the logits from the last time step (B, Vocab_Size)
            last_time_step = prediction[:, -1, :]
            # Convert logits to probabilities
            probabilities = nn.functional.softmax(last_time_step, dim = -1)
            # Sample the next token based on probabilities
            next_char = torch.multinomial(probabilities, 1, generator=generator)
            # Reset RNG state to maintain deterministic sampling
            generator.set_state(initial_state)
            # Extend context with the new token
            context = torch.cat((context, next_char), dim = -1)
            # Convert token index to character and store
            res.append(int_to_char[next_char.item()])
        # Return the generated sequence as a string
        return ''.join(res)
