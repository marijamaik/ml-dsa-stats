import torch
import torch.nn as nn
from torchtyping import TensorType

class GPT(nn.Module):
    
    def __init__(self, vocab_size: int, context_length: int, model_dim: int, num_blocks: int, num_heads: int):
        super().__init__()
        torch.manual_seed(0)
        self.word_embeddings = nn.Embedding(vocab_size, model_dim)  # Token embedding
        self.position_embeddings = nn.Embedding(context_length, model_dim)  # Positional embedding
        self.transformer_blocks = nn.Sequential()
        for i in range(num_blocks):
            self.transformer_blocks.append(self.TransformerBlock(model_dim, num_heads))  # Stack transformer blocks
        self.final_norm = nn.LayerNorm(model_dim)  # Final layer normalization
        self.vocab_projection = nn.Linear(model_dim, vocab_size)  # Project to vocab size

    def forward(self, context: TensorType[int]) -> TensorType[float]:
        torch.manual_seed(0)
        embedded = self.word_embeddings(context)  # Embed tokens
        context_length = context.shape[1]
        positions = torch.arange(context_length)
        embedded = embedded + self.position_embeddings(positions)  # Add positional encoding

        raw_output = self.vocab_projection(self.final_norm(self.transformer_blocks(embedded)))
        # raw_output is batch by context_length by vocab_size

        probabilities = nn.functional.softmax(raw_output, dim = -1)  # Softmax over vocab
        return torch.round(probabilities, decimals=4)  # Return rounded probabilities
    
    class TransformerBlock(nn.Module):

        class MultiHeadedSelfAttention(nn.Module):

            class SingleHeadAttention(nn.Module):
                def __init__(self, model_dim: int, head_size: int):
                    super().__init__()
                    torch.manual_seed(0)
                    self.key_gen = nn.Linear(model_dim, head_size, bias=False)
                    self.query_gen = nn.Linear(model_dim, head_size, bias=False)
                    self.value_gen = nn.Linear(model_dim, head_size, bias=False)
                
                def forward(self, embedded: TensorType[float]) -> TensorType[float]:
                    k = self.key_gen(embedded)  # Keys
                    q = self.query_gen(embedded)  # Queries
                    v = self.value_gen(embedded)  # Values

                    scores = q @ torch.transpose(k, 1, 2)  # Dot product attention
                    context_length, attention_dim = k.shape[1], k.shape[2]
                    scores = scores / (attention_dim ** 0.5)  # Scale scores

                    lower_triangular = torch.tril(torch.ones(context_length, context_length))  # Causal mask
                    mask = lower_triangular == 0
                    scores = scores.masked_fill(mask, float('-inf'))  # Apply mask
                    scores = nn.functional.softmax(scores, dim = 2)  # Normalize scores

                    return scores @ v  # Weighted sum of values
                
            def __init__(self, model_dim: int, num_heads: int):
                super().__init__()
                torch.manual_seed(0)
                self.att_heads = nn.ModuleList()
                for i in range(num_heads):
                    self.att_heads.append(self.SingleHeadAttention(model_dim, model_dim // num_heads))  # Create heads

            def forward(self, embedded: TensorType[float]) -> TensorType[float]:
                head_outputs = []
                for head in self.att_heads:
                    head_outputs.append(head(embedded))  # Run all heads
                concatenated = torch.cat(head_outputs, dim = 2)  # Concatenate head outputs
                return concatenated
        
        class VanillaNeuralNetwork(nn.Module):

            def __init__(self, model_dim: int):
                super().__init__()
                torch.manual_seed(0)
                self.up_projection = nn.Linear(model_dim, model_dim * 4)  # Expand dimension
                self.relu = nn.ReLU()
                self.down_projection = nn.Linear(model_dim * 4, model_dim)  # Reduce back
                self.dropout = nn.Dropout(0.2) # using p = 0.2
            
            def forward(self, x: TensorType[float]) -> TensorType[float]:
                torch.manual_seed(0)
                return self.dropout(self.down_projection(self.relu(self.up_projection(x))))  # Feedforward block

        def __init__(self, model_dim: int, num_heads: int):
            super().__init__()
            torch.manual_seed(0)
            self.attention = self.MultiHeadedSelfAttention(model_dim, num_heads)
            self.linear_network = self.VanillaNeuralNetwork(model_dim)
            self.first_norm = nn.LayerNorm(model_dim)  # Norm before attention
            self.second_norm = nn.LayerNorm(model_dim)  # Norm before feedforward

        def forward(self, embedded: TensorType[float]) -> TensorType[float]:
            torch.manual_seed(0)
            embedded = embedded + self.attention(self.first_norm(embedded))  # Residual + attention
            embedded = embedded + self.linear_network(self.second_norm(embedded))  # Residual + feedforward
            return embedded
