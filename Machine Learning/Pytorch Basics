import torch
import torch.nn
from torchtyping import TensorType

class Solution:
    # Reshape an M×N tensor into a (M⋅N//2)×2 tensor
    def reshape(self, to_reshape: TensorType[float]) -> TensorType[float]:
        M, N = to_reshape.shape
        reshape = torch.reshape(to_reshape, (M * N // 2, 2))
        return torch.round(reshape, decimals = 4)

    # Find the average of every column in a tensor
    def average(self, to_avg: TensorType[float]) -> TensorType[float]:
        avg = torch.mean(to_avg, dim = 0)
        return torch.round(avg, decimals = 4)

    # Combine an M×N tensor and a M×M tensor into a M×(M+N) tensor
    def concatenate(self, cat_one: TensorType[float], cat_two: TensorType[float]) -> TensorType[float]:
        concat = torch.cat((cat_one, cat_two), dim = 1)
        return torch.round(concat, decimals = 4)

    # Calculate the MSE loss between prediction and target
    def get_loss(self, prediction: TensorType[float], target: TensorType[float]) -> TensorType[float]:
        loss = torch.nn.functional.mse_loss(prediction, target)
        return torch.round(loss, decimals = 4)
